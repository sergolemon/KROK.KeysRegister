// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(EfAppDbContext))]
    partial class EfAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AuditoryTagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("auditory_tag_id");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.ToTable("auditory_tags", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("avatar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("KeyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("key_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("KeyId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.KeyAuditoryTagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("key_auditory_tag_id");

                    b.Property<Guid>("AuditoryTagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("auditory_tag_id");

                    b.Property<Guid>("KeyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("key_id");

                    b.HasKey("Id");

                    b.HasAlternateKey("KeyId", "AuditoryTagId");

                    b.HasIndex("AuditoryTagId");

                    b.ToTable("key_auditory_tags", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.KeyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("key_id");

                    b.Property<string>("AuditoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("auditory_name");

                    b.HasKey("Id");

                    b.ToTable("keys", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("KeyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("key_id");

                    b.HasKey("Id");

                    b.HasAlternateKey("KeyId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EventEntity", b =>
                {
                    b.HasOne("Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany("Events")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Domain.Entities.KeyEntity", "Key")
                        .WithMany("Events")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Key");
                });

            modelBuilder.Entity("Domain.Entities.KeyAuditoryTagEntity", b =>
                {
                    b.HasOne("Domain.Entities.AuditoryTagEntity", "AuditoryTag")
                        .WithMany("KeyAuditoryTags")
                        .HasForeignKey("AuditoryTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.KeyEntity", "Key")
                        .WithMany("KeyAuditoryTags")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditoryTag");

                    b.Navigation("Key");
                });

            modelBuilder.Entity("Domain.Entities.PermissionEntity", b =>
                {
                    b.HasOne("Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany("Permissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.KeyEntity", "Key")
                        .WithMany("Permissions")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Key");
                });

            modelBuilder.Entity("Domain.Entities.AuditoryTagEntity", b =>
                {
                    b.Navigation("KeyAuditoryTags");
                });

            modelBuilder.Entity("Domain.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Domain.Entities.KeyEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("KeyAuditoryTags");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
